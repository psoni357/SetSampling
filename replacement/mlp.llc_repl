#include "cache.h"

#define maxPMCL 3
uint32_t mlpl[LLC_SET][LLC_WAY];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize Pure Miss Contribution Based Replacement" << endl;
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            mlpl[i][j] = 0;
        }
    }


}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
        
  
    // fill invalid line first

    int way = 0;
    for (way=0; way<LLC_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            return way;
        }
    }

  
    if(way == LLC_WAY)
    {
    	double smallest = ((double)((LLC_WAY-1) - block[set][0].lru) + (4*mlpl[set][0]));
    	for(int i = 0; i < LLC_WAY; i++)
    	{
		double toCompare = (double)((LLC_WAY-1) - block[set][i].lru) + (4*mlpl[set][i]);
		if(toCompare <= smallest)
		{
	    		smallest = toCompare;
	    		way = i;
		}
    	}
   }
    return way;


    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    if (hit && (type == WRITEBACK))
    {
    	return;
    }    
    else
    {
	if(0 <= block[set][way].mlp && block[set][way].mlp <= 59)
	{
		mlpl[set][way] = 0;
	}
	else if (60 <= block[set][way].mlp && block[set][way].mlp <= 119)
	{
		mlpl[set][way] = 1;
	}
	else if (120 <= block[set][way].mlp && block[set][way].mlp <= 179)
	{
		mlpl[set][way] = 2;
	}
        else if (180 <= block[set][way].mlp && block[set][way].mlp <= 239)
        {
                mlpl[set][way] = 3;
        }	
        else if (240 <= block[set][way].mlp && block[set][way].mlp <= 299)
        {
                mlpl[set][way] = 4;
        }
	else if (300 <= block[set][way].mlp && block[set][way].mlp <= 359)
        {
                mlpl[set][way] = 5;
        }
        else if (360 <= block[set][way].mlp && block[set][way].mlp <= 419)
        {
                mlpl[set][way] = 6;
        }	
	else
	{
		mlpl[set][way] = 7;
	}
    }
    lru_update(set, way);

}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
